#!/usr/bin/python
# merges a couple of files into a single hosts file
#
# Author: Thomas Delrue

import argparse
import os
import random
import shutil
import sys
import time

VERBOSITY_ERR = 1
VERBOSITY_WARN = 2
VERBOSITY_INFO = 3
VERBOSITY_VERBOSE = 4

SINKHOLE = "0.0.0.0"
LOCALADDRESSES = { "127.0.0.1",  "::1" }

parser = argparse.ArgumentParser(description="MergeHosts merges a hosts file with local, hard-coded and untrusted hosts")
parser.add_argument("-v", "--verbose", help="Defines the verbosity level", action="count", default=0)
parser.add_argument("-l", "--local", help="Local hosts file containing one hostname per line (default value=local.hosts)", type=argparse.FileType('r'), default="local.hosts", dest="local_hosts")
parser.add_argument("-u", "--untrusted", help="Untrusted hosts file containing one hostname per line (default value=untrusted.hosts)", type=argparse.FileType('r'), default="untrusted.hosts", dest="untrusted_hosts")
parser.add_argument("-hc", "--hard", help="Hard coded hosts file formatted as <ip> <hostname> (default value=hardcoded.hosts)", type=argparse.FileType('r'), default="hardcoded.hosts", dest="hard_coded")
parser.add_argument("-e",  "--external", help="File containing the external hosts formatted as <ip> <hostname>", type=argparse.FileType('r'), default="hosts.txt", dest="external_hosts")
parser.add_argument("-d", "--destination", help="Destination file (default value=/tmp/mergehosts.whatif)", default="/tmp/mergehosts.whatif", type=argparse.FileType('w+'), dest="destination_file")
parser.add_argument('--version', action='version', version='%(prog)s 0.1')
args = parser.parse_args()

def print_argument_values():
    if args.verbose >= VERBOSITY_VERBOSE:
        print "args.verbose = [", args.verbose, "]"
        print "args.local_hosts = [", args.local_hosts, "]"
        print "args.untrusted_hosts = [", args.untrusted_hosts, "]"
        print "args.hard_coded = [", args.hard_coded, "]"
        print "args.external_hosts = [", args.external_hosts, "]"
        print "args.destination_file = [", args.destination_file, "]"

def get_temp_file():
    keepTrying = True

    # naive way of finding random temporary file name
    while keepTrying == True:
        tmp_file_path = "/tmp/mergehosts" + str(time.time()).replace('.', '') + ".hosts"
        keepTrying = os.path.isfile(tmp_file_path)

    if args.verbose >= VERBOSITY_VERBOSE:
        print "Temporary hosts file: " + tmp_file_path

    return open(tmp_file_path, "w+")

def write_section_title(destination,  title):
    if args.verbose >= VERBOSITY_INFO:
        print "Adding " + title + "..."

    destination.write("#\n# ")
    destination.write(title)
    destination.write("\n")
    destination.write("#\n")


def write_entry(destination, hostname, ipvalue):
    destination.write(ipvalue)
    destination.write("\t")
    destination.write(hostname)
    destination.write("\n")

def append_local_hosts(destination):
    write_section_title(destination, "Local Hosts")
    for line in args.local_hosts:
        line = line.strip()
        if line != "" and line[0] != "#":
            for local_address in LOCALADDRESSES:
                write_entry(destination, line, local_address)

    args.local_hosts.close()

def append_untrusted_hosts(destination):
    write_section_title(destination, "Untrusted Hosts")
    for line in args.untrusted_hosts:
        line = line.strip()
        if line != "" and line[0] != "#":
            write_entry(destination, line, SINKHOLE)

    args.untrusted_hosts.close()

def append_hardcoded_hosts(destination):
    write_section_title(destination, "Hard Coded Hosts")
    for line in args.hard_coded:
        line = line.strip()
        if line != "" and line[0] != '#':
            destination.write(line)
            destination.write('\n')

    args.hard_coded.close()

def append_external_hosts(destination):
    write_section_title(destination, "External Hosts")
    for line in args.external_hosts:
        line = line.strip()
        if line != "" and line[0] != '#':
            normalized = line.replace('\t',  ' ').split(' ',  1)
            if normalized[1].split(' ',  1)[0].lower() != "localhost":
                write_entry(destination, normalized[1].strip(), SINKHOLE)

    args.external_hosts.close()

def main():
    print_argument_values()
    tmpFile = get_temp_file()

    # the file is built up in the order:
    # 1. local
    # 2. hard_coded
    # 3. untrusted
    # 4. external
    tmpFile.write("# Hosts file generated by MergeHosts (" + time.asctime() + ")\n")
    append_local_hosts(tmpFile)
    append_hardcoded_hosts(tmpFile)
    append_untrusted_hosts(tmpFile)
    append_external_hosts(tmpFile)
    tmpFile.close()

    # commit the content
    shutil.copyfile(tmpFile.name,  args.destination_file.name)
    os.remove(tmpFile.name)

if __name__ == '__main__':
    main()
